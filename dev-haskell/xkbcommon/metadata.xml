<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		Wrapper library for libxkbcommon, which is the new alternative for the X11 XKB.h keyboard input
		API. Specifically, it finds keymap files from disk based on Rule\/Model\/Layout\/Variant\/Option
		specifications, and compiles them into a 'Keymap'. From this 'Keymap', a 'KeyboardState' can be
		constructed which represents the states of various physical buttons such as the shift/alt/ctrl
		keys, and can give the correct key symbol based on keyboard events. E.g., pressing the @\&lt;h\&gt;@ key
		while @\&lt;shift\&gt;@ is pressed produces the @H@ symbol in the common QWERTY keymaps, but in e.g.
		the Dvorak keymap, it produces the D symbol.
		
		After keymap creation, which libxkbcommon can do based on locale preferences and enviroment
		variables, this is all handled by routing keyboard events through libxkbcommon.
		
		At this stage, these haskell bindings do not make libxkbcommon look much like a haskell library.
		For example, in principle the entire libxkbcommon library is just a stateful processor, and has
		nothing to do with the IO monad.
		However, because I am not yet a very good haskell programmer, and because
		in most realistic use cases input data comes from the IO monad anyway, the stateful operations
		are encoded in the IO monad anyway.
		
		Note that these bindings load the keysym constants from the libxkbcommon C header files at
		compile time using TH, and similarly keycodes from the Linux header files.
		These should be present for correct compilation.
	</longdescription>
</pkgmetadata>
